/// db manager

import 'dart:io';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';

class DatabaseManager {
  static final DatabaseManager _instance = DatabaseManager._internal();
  factory DatabaseManager() => _instance;

  static Database? _database;

  DatabaseManager._internal();

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, 'my_database.db');
    return await openDatabase(path, version: 1, onCreate: _onCreate);
  }

  Future<void> _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE user (
        id INTEGER PRIMARY KEY,
        uname TEXT,
        email TEXT,
        pass TEXT
      )
    ''');
    await db.execute('''
      CREATE TABLE u_data (
        id INTEGER PRIMARY KEY,
        uid INTEGER,
        sid INTEGER,
        fname TEXT,
        lname TEXT,
        phone TEXT,
        address TEXT
      )
    ''');
    await db.execute('''
      CREATE TABLE school (
        id INTEGER PRIMARY KEY,
        eiin TEXT,
        semail TEXT,
        sname TEXT,
        saddress TEXT,
        sphone TEXT
      )
    ''');
    await db.execute('''
      CREATE TABLE admin (
        id INTEGER PRIMARY KEY,
        sid INTEGER,
        aname TEXT,
        phone TEXT,
        email TEXT,
        uid INTEGER
      )
    ''');
  }

  Future<void> close() async {
    Database db = await database;
    db.close();
    _database = null;
  }
}



// db helper

import 'package:sqflite/sqflite.dart';
import 'database_manager.dart';
import '../models/user.dart';
import '../models/u_data.dart';
import '../models/school.dart';
import '../models/admin.dart';

class DatabaseHelper {
  Future<int> insertUser(User user) async {
    Database db = await DatabaseManager().database;
    return await db.insert('user', user.toMap());
  }

  Future<int> updateUser(User user) async {
    Database db = await DatabaseManager().database;
    return await db.update('user', user.toMap(), where: 'id = ?', whereArgs: [user.id]);
  }

  Future<int> deleteUser(int id) async {
    Database db = await DatabaseManager().database;
    return await db.delete('user', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<User>> getUsers() async {
    Database db = await DatabaseManager().database;
    List<Map<String, dynamic>> maps = await db.query('user');
    return List.generate(maps.length, (i) {
      return User.fromMap(maps[i]);
    });
  }

  Future<User?> getUserById(int id) async {
    Database db = await DatabaseManager().database;
    List<Map<String, dynamic>> maps = await db.query('user', where: 'id = ?', whereArgs: [id]);
    if (maps.isNotEmpty) {
      return User.fromMap(maps.first);
    }
    return null;
  }

  Future<int> insertUData(UData uData) async {
    Database db = await DatabaseManager().database;
    return await db.insert('u_data', uData.toMap());
  }

  Future<int> updateUData(UData uData) async {
    Database db = await DatabaseManager().database;
    return await db.update('u_data', uData.toMap(), where: 'id = ?', whereArgs: [uData.id]);
  }

  Future<int> deleteUData(int id) async {
    Database db = await DatabaseManager().database;
    return await db.delete('u_data', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<UData>> getUData() async {
    Database db = await DatabaseManager().database;
    List<Map<String, dynamic>> maps = await db.query('u_data');
    return List.generate(maps.length, (i) {
      return UData.fromMap(maps[i]);
    });
  }

  Future<UData?> getUDataById(int id) async {
    Database db = await DatabaseManager().database;
    List<Map<String, dynamic>> maps = await db.query('u_data', where: 'id = ?', whereArgs: [id]);
    if (maps.isNotEmpty) {
      return UData.fromMap(maps.first);
    }
    return null;
  }

  Future<int> insertSchool(School school) async {
    Database db = await DatabaseManager().database;
    return await db.insert('school', school.toMap());
  }

  Future<int> updateSchool(School school) async {
    Database db = await DatabaseManager().database;
    return await db.update('school', school.toMap(), where: 'id = ?', whereArgs: [school.id]);
  }

  Future<int> deleteSchool(int id) async {
    Database db = await DatabaseManager().database;
    return await db.delete('school', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<School>> getSchools() async {
    Database db = await DatabaseManager().database;
    List<Map<String, dynamic>> maps = await db.query('school');
    return List.generate(maps.length, (i) {
      return School.fromMap(maps[i]);
    });
  }

  Future<School?> getSchoolById(int id) async {
    Database db = await DatabaseManager().database;
    List<Map<String, dynamic>> maps = await db.query('school', where: 'id = ?', whereArgs: [id]);
    if (maps.isNotEmpty) {
      return School.fromMap(maps.first);
    }
    return null;
  }

  Future<int> insertAdmin(Admin admin) async {
    Database db = await DatabaseManager().database;
    return await db.insert('admin', admin.toMap());
  }

  Future<int> updateAdmin(Admin admin) async {
    Database db = await DatabaseManager().database;
    return await db.update('admin', admin.toMap(), where: 'id = ?', whereArgs: [admin.id]);
  }

  Future<int> deleteAdmin(int id) async {
    Database db = await DatabaseManager().database;
    return await db.delete('admin', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<Admin>> getAdmins() async {
    Database db = await DatabaseManager().database;
    List<Map<String, dynamic>> maps = await db.query('admin');
    return List.generate(maps.length, (i) {
      return Admin.fromMap(maps[i]);
    });
  }

  Future<Admin?> getAdminById(int id) async {
    Database db = await DatabaseManager().database;
    List<Map<String, dynamic>> maps = await db.query('admin', where: 'id = ?', whereArgs: [id]);
    if (maps.isNotEmpty) {
      return Admin.fromMap(maps.first);
    }
    return null;
  }

  Future<List<Map<String, dynamic>>> getUserUDataSchool() async {
    Database db = await DatabaseManager().database;
    String sql = '''
      SELECT user.id AS user_id, user.uname, user.email, user.pass,
             u_data.id AS udata_id, u_data.uid, u_data.sid, u_data.fname, u_data.lname, u_data.phone, u_data.address,
             school.id AS school_id, school.eiin, school.semail, school.sname, school.saddress, school.sphone
      FROM user
      INNER JOIN u_data ON user.id = u_data.uid
      INNER JOIN school ON u_data.sid = school.id
    ''';
    List<Map<String, dynamic>> result = await db.rawQuery(sql);
    return result;
  }
}



/// multiprovider return in main.dart myapp

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => UserProvider()),
        ChangeNotifierProvider(create: (_) => UDataProvider()),
        ChangeNotifierProvider(create: (_) => SchoolProvider()),
        ChangeNotifierProvider(create: (_) => AdminProvider()),
        ChangeNotifierProvider(create: (_) => UserUDataSchoolProvider()),
      ],
      child: MaterialApp(
        home: UserUDataSchoolScreen(),
      ),
    );
  }


// 



import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/user_udata_school_provider.dart';
import '../models/user_udata_school.dart';

class UserUDataSchoolScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('User, UData, and School'),
      ),
      body: FutureBuilder(
        future: Provider.of<UserUDataSchoolProvider>(context, listen: false).fetchCombinedData(),
        builder: (ctx, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else {
            return Consumer<UserUDataSchoolProvider>(
              builder: (ctx, provider, child) {
                return ListView.builder(
                  itemCount: provider.combinedData.length,
                  itemBuilder: (ctx, index) {
                    UserUDataSchool data = provider.combinedData[index];
                    return ListTile(
                      title: Text(data.uname),
                      subtitle: Text('${data.fname} ${data.lname} - ${data.sname}'),
                    );
                  },
                );
              },
            );
          }
        },
      ),
    );
  }
}

