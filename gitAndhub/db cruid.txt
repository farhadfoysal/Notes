import 'dart:async';
import 'dart:io';

import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';

import 'models/user.dart';
import 'models/u_data.dart';
import 'models/school.dart';
import 'models/admin.dart';

class DatabaseHelper {
  static final DatabaseHelper _instance = DatabaseHelper._internal();
  factory DatabaseHelper() => _instance;

  static Database? _database;

  DatabaseHelper._internal();

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, 'my_database.db');
    return await openDatabase(path, version: 1, onCreate: _onCreate);
  }

  Future<void> _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE user (
        id INTEGER PRIMARY KEY,
        uname TEXT,
        email TEXT,
        pass TEXT
      )
    ''');
    await db.execute('''
      CREATE TABLE u_data (
        id INTEGER PRIMARY KEY,
        uid INTEGER,
        sid INTEGER,
        fname TEXT,
        lname TEXT,
        phone TEXT,
        address TEXT
      )
    ''');
    await db.execute('''
      CREATE TABLE school (
        id INTEGER PRIMARY KEY,
        eiin TEXT,
        semail TEXT,
        sname TEXT,
        saddress TEXT,
        sphone TEXT
      )
    ''');
    await db.execute('''
      CREATE TABLE admin (
        id INTEGER PRIMARY KEY,
        sid INTEGER,
        aname TEXT,
        phone TEXT,
        email TEXT,
        uid INTEGER
      )
    ''');
  }

  // User CRUD operations
  Future<int> insertUser(User user) async {
    Database db = await database;
    return await db.insert('user', user.toMap());
  }

  Future<int> updateUser(User user) async {
    Database db = await database;
    return await db.update('user', user.toMap(), where: 'id = ?', whereArgs: [user.id]);
  }

  Future<int> deleteUser(int id) async {
    Database db = await database;
    return await db.delete('user', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<User>> getUsers() async {
    Database db = await database;
    List<Map<String, dynamic>> maps = await db.query('user');
    return List.generate(maps.length, (i) {
      return User.fromMap(maps[i]);
    });
  }

  // UData CRUD operations
  Future<int> insertUData(UData uData) async {
    Database db = await database;
    return await db.insert('u_data', uData.toMap());
  }

  Future<int> updateUData(UData uData) async {
    Database db = await database;
    return await db.update('u_data', uData.toMap(), where: 'id = ?', whereArgs: [uData.id]);
  }

  Future<int> deleteUData(int id) async {
    Database db = await database;
    return await db.delete('u_data', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<UData>> getUData() async {
    Database db = await database;
    List<Map<String, dynamic>> maps = await db.query('u_data');
    return List.generate(maps.length, (i) {
      return UData.fromMap(maps[i]);
    });
  }

  // School CRUD operations
  Future<int> insertSchool(School school) async {
    Database db = await database;
    return await db.insert('school', school.toMap());
  }

  Future<int> updateSchool(School school) async {
    Database db = await database;
    return await db.update('school', school.toMap(), where: 'id = ?', whereArgs: [school.id]);
  }

  Future<int> deleteSchool(int id) async {
    Database db = await database;
    return await db.delete('school', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<School>> getSchools() async {
    Database db = await database;
    List<Map<String, dynamic>> maps = await db.query('school');
    return List.generate(maps.length, (i) {
      return School.fromMap(maps[i]);
    });
  }

  // Admin CRUD operations
  Future<int> insertAdmin(Admin admin) async {
    Database db = await database;
    return await db.insert('admin', admin.toMap());
  }

  Future<int> updateAdmin(Admin admin) async {
    Database db = await database;
    return await db.update('admin', admin.toMap(), where: 'id = ?', whereArgs: [admin.id]);
  }

  Future<int> deleteAdmin(int id) async {
    Database db = await database;
    return await db.delete('admin', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<Admin>> getAdmins() async {
    Database db = await database;
    List<Map<String, dynamic>> maps = await db.query('admin');
    return List.generate(maps.length, (i) {
      return Admin.fromMap(maps[i]);
    });
  }

  Future<void> close() async {
    Database db = await database;
    db.close();
    _database = null;
  }
}








import 'package:flutter/material.dart';
import 'database_helper.dart';
import 'models/user.dart';
import 'models/u_data.dart';
import 'models/school.dart';
import 'models/admin.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Flutter SQLite Example')),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              ElevatedButton(
                onPressed: () async {
                  DatabaseHelper databaseHelper = DatabaseHelper();

                  // Insert User
                  User user = User(uname: 'JohnDoe', email: 'john@example.com', pass: 'password123');
                  await databaseHelper.insertUser(user);

                  // Insert UData
                  UData uData = UData(uid: 1, sid: 1, fname: 'John', lname: 'Doe', phone: '123456789', address: '123 Main St');
                  await databaseHelper.insertUData(uData);

                  // Insert School
                  School school = School(eiin: '123456', semail: 'school@example.com', sname: 'ABC School', saddress: '456 School St', sphone: '987654321');
                  await databaseHelper.insertSchool(school);

                  // Insert Admin
                  Admin admin = Admin(sid: 1, aname: 'Admin', phone: '111222333', email: 'admin@example.com', uid: 1);
                  await databaseHelper.insertAdmin(admin);

                  // Retrieve Data
                  List<User> users = await databaseHelper.getUsers();
                  List<UData> uDataList = await databaseHelper.getUData();
                  List<School> schools = await databaseHelper.getSchools();
                  List<Admin> admins = await databaseHelper.getAdmins();

                  print(users);
                  print(uDataList);
                  print(schools);
                  print(admins);

                  // Update User
                  user = users.first;
                  user.uname = 'UpdatedName';
                  await databaseHelper.updateUser(user);

                  // Delete User
                  await databaseHelper.deleteUser(user.id!);

                  // Retrieve Data Again
                  users = await databaseHelper.getUsers();
                  print(users);
                },
                child: Text('Insert, Update, Delete, Retrieve Data'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}














import 'dart:async';
import 'dart:io';

import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';

import '../models/user.dart';
import '../models/u_data.dart';
import '../models/school.dart';
import '../models/admin.dart';

class DatabaseHelper {
  static final DatabaseHelper _instance = DatabaseHelper._internal();
  factory DatabaseHelper() => _instance;

  static Database? _database;

  DatabaseHelper._internal();

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, 'my_database.db');
    return await openDatabase(path, version: 1, onCreate: _onCreate);
  }

  Future<void> _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE user (
        id INTEGER PRIMARY KEY,
        uname TEXT,
        email TEXT,
        pass TEXT
      )
    ''');
    await db.execute('''
      CREATE TABLE u_data (
        id INTEGER PRIMARY KEY,
        uid INTEGER,
        sid INTEGER,
        fname TEXT,
        lname TEXT,
        phone TEXT,
        address TEXT
      )
    ''');
    await db.execute('''
      CREATE TABLE school (
        id INTEGER PRIMARY KEY,
        eiin TEXT,
        semail TEXT,
        sname TEXT,
        saddress TEXT,
        sphone TEXT
      )
    ''');
    await db.execute('''
      CREATE TABLE admin (
        id INTEGER PRIMARY KEY,
        sid INTEGER,
        aname TEXT,
        phone TEXT,
        email TEXT,
        uid INTEGER
      )
    ''');
  }

  // User CRUD operations
  Future<int> insertUser(User user) async {
    Database db = await database;
    return await db.insert('user', user.toMap());
  }

  Future<int> updateUser(User user) async {
    Database db = await database;
    return await db.update('user', user.toMap(), where: 'id = ?', whereArgs: [user.id]);
  }

  Future<int> deleteUser(int id) async {
    Database db = await database;
    return await db.delete('user', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<User>> getUsers() async {
    Database db = await database;
    List<Map<String, dynamic>> maps = await db.query('user');
    return List.generate(maps.length, (i) {
      return User.fromMap(maps[i]);
    });
  }

  // UData CRUD operations
  Future<int> insertUData(UData uData) async {
    Database db = await database;
    return await db.insert('u_data', uData.toMap());
  }

  Future<int> updateUData(UData uData) async {
    Database db = await database;
    return await db.update('u_data', uData.toMap(), where: 'id = ?', whereArgs: [uData.id]);
  }

  Future<int> deleteUData(int id) async {
    Database db = await database;
    return await db.delete('u_data', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<UData>> getUData() async {
    Database db = await database;
    List<Map<String, dynamic>> maps = await db.query('u_data');
    return List.generate(maps.length, (i) {
      return UData.fromMap(maps[i]);
    });
  }

  // School CRUD operations
  Future<int> insertSchool(School school) async {
    Database db = await database;
    return await db.insert('school', school.toMap());
  }

  Future<int> updateSchool(School school) async {
    Database db = await database;
    return await db.update('school', school.toMap(), where: 'id = ?', whereArgs: [school.id]);
  }

  Future<int> deleteSchool(int id) async {
    Database db = await database;
    return await db.delete('school', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<School>> getSchools() async {
    Database db = await database;
    List<Map<String, dynamic>> maps = await db.query('school');
    return List.generate(maps.length, (i) {
      return School.fromMap(maps[i]);
    });
  }

  // Admin CRUD operations
  Future<int> insertAdmin(Admin admin) async {
    Database db = await database;
    return await db.insert('admin', admin.toMap());
  }

  Future<int> updateAdmin(Admin admin) async {
    Database db = await database;
    return await db.update('admin', admin.toMap(), where: 'id = ?', whereArgs: [admin.id]);
  }

  Future<int> deleteAdmin(int id) async {
    Database db = await database;
    return await db.delete('admin', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<Admin>> getAdmins() async {
    Database db = await database;
    List<Map<String, dynamic>> maps = await db.query('admin');
    return List.generate(maps.length, (i) {
      return Admin.fromMap(maps[i]);
    });
  }

  Future<void> close() async {
    Database db = await database;
    db.close();
    _database = null;
  }
}


















